var kToUppercaseTable0Size = 590;
var kToUppercaseTable0 = [
    1073741921, -128,   122,        -128,   181,        2972,
    223,        1,      1073742048, -128,   246,        -128,
    1073742072, -128,   254,        -128,  // NOLINT
    255,        484,    257,        -4,     259,        -4,
    261,        -4,     263,        -4,     265,        -4,
    267,        -4,     269,        -4,  // NOLINT
    271,        -4,     273,        -4,     275,        -4,
    277,        -4,     279,        -4,     281,        -4,
    283,        -4,     285,        -4,  // NOLINT
    287,        -4,     289,        -4,     291,        -4,
    293,        -4,     295,        -4,     297,        -4,
    299,        -4,     301,        -4,  // NOLINT
    303,        -4,     305,        -928,   307,        -4,
    309,        -4,     311,        -4,     314,        -4,
    316,        -4,     318,        -4,  // NOLINT
    320,        -4,     322,        -4,     324,        -4,
    326,        -4,     328,        -4,     329,        5,
    331,        -4,     333,        -4,  // NOLINT
    335,        -4,     337,        -4,     339,        -4,
    341,        -4,     343,        -4,     345,        -4,
    347,        -4,     349,        -4,  // NOLINT
    351,        -4,     353,        -4,     355,        -4,
    357,        -4,     359,        -4,     361,        -4,
    363,        -4,     365,        -4,  // NOLINT
    367,        -4,     369,        -4,     371,        -4,
    373,        -4,     375,        -4,     378,        -4,
    380,        -4,     382,        -4,  // NOLINT
    383,        -1200,  384,        780,    387,        -4,
    389,        -4,     392,        -4,     396,        -4,
    402,        -4,     405,        388,  // NOLINT
    409,        -4,     410,        652,    414,        520,
    417,        -4,     419,        -4,     421,        -4,
    424,        -4,     429,        -4,  // NOLINT
    432,        -4,     436,        -4,     438,        -4,
    441,        -4,     445,        -4,     447,        224,
    453,        -4,     454,        -8,  // NOLINT
    456,        -4,     457,        -8,     459,        -4,
    460,        -8,     462,        -4,     464,        -4,
    466,        -4,     468,        -4,  // NOLINT
    470,        -4,     472,        -4,     474,        -4,
    476,        -4,     477,        -316,   479,        -4,
    481,        -4,     483,        -4,  // NOLINT
    485,        -4,     487,        -4,     489,        -4,
    491,        -4,     493,        -4,     495,        -4,
    496,        9,      498,        -4,  // NOLINT
    499,        -8,     501,        -4,     505,        -4,
    507,        -4,     509,        -4,     511,        -4,
    513,        -4,     515,        -4,  // NOLINT
    517,        -4,     519,        -4,     521,        -4,
    523,        -4,     525,        -4,     527,        -4,
    529,        -4,     531,        -4,  // NOLINT
    533,        -4,     535,        -4,     537,        -4,
    539,        -4,     541,        -4,     543,        -4,
    547,        -4,     549,        -4,  // NOLINT
    551,        -4,     553,        -4,     555,        -4,
    557,        -4,     559,        -4,     561,        -4,
    563,        -4,     572,        -4,  // NOLINT
    1073742399, 43260,  576,        43260,  578,        -4,
    583,        -4,     585,        -4,     587,        -4,
    589,        -4,     591,        -4,  // NOLINT
    592,        43132,  593,        43120,  594,        43128,
    595,        -840,   596,        -824,   1073742422, -820,
    599,        -820,   601,        -808,  // NOLINT
    603,        -812,   604,        169276, 608,        -820,
    609,        169260, 611,        -828,   613,        169120,
    614,        169232, 616,        -836,  // NOLINT
    617,        -844,   619,        42972,  620,        169220,
    623,        -844,   625,        42996,  626,        -852,
    629,        -856,   637,        42908,  // NOLINT
    640,        -872,   643,        -872,   647,        169128,
    648,        -872,   649,        -276,   1073742474, -868,
    651,        -868,   652,        -284,  // NOLINT
    658,        -876,   670,        169032, 837,        336,
    881,        -4,     883,        -4,     887,        -4,
    1073742715, 520,    893,        520,  // NOLINT
    912,        13,     940,        -152,   1073742765, -148,
    943,        -148,   944,        17,     1073742769, -128,
    961,        -128,   962,        -124,  // NOLINT
    1073742787, -128,   971,        -128,   972,        -256,
    1073742797, -252,   974,        -252,   976,        -248,
    977,        -228,   981,        -188,  // NOLINT
    982,        -216,   983,        -32,    985,        -4,
    987,        -4,     989,        -4,     991,        -4,
    993,        -4,     995,        -4,  // NOLINT
    997,        -4,     999,        -4,     1001,       -4,
    1003,       -4,     1005,       -4,     1007,       -4,
    1008,       -344,   1009,       -320,  // NOLINT
    1010,       28,     1011,       -464,   1013,       -384,
    1016,       -4,     1019,       -4,     1073742896, -128,
    1103,       -128,   1073742928, -320,  // NOLINT
    1119,       -320,   1121,       -4,     1123,       -4,
    1125,       -4,     1127,       -4,     1129,       -4,
    1131,       -4,     1133,       -4,  // NOLINT
    1135,       -4,     1137,       -4,     1139,       -4,
    1141,       -4,     1143,       -4,     1145,       -4,
    1147,       -4,     1149,       -4,  // NOLINT
    1151,       -4,     1153,       -4,     1163,       -4,
    1165,       -4,     1167,       -4,     1169,       -4,
    1171,       -4,     1173,       -4,  // NOLINT
    1175,       -4,     1177,       -4,     1179,       -4,
    1181,       -4,     1183,       -4,     1185,       -4,
    1187,       -4,     1189,       -4,  // NOLINT
    1191,       -4,     1193,       -4,     1195,       -4,
    1197,       -4,     1199,       -4,     1201,       -4,
    1203,       -4,     1205,       -4,  // NOLINT
    1207,       -4,     1209,       -4,     1211,       -4,
    1213,       -4,     1215,       -4,     1218,       -4,
    1220,       -4,     1222,       -4,  // NOLINT
    1224,       -4,     1226,       -4,     1228,       -4,
    1230,       -4,     1231,       -60,    1233,       -4,
    1235,       -4,     1237,       -4,  // NOLINT
    1239,       -4,     1241,       -4,     1243,       -4,
    1245,       -4,     1247,       -4,     1249,       -4,
    1251,       -4,     1253,       -4,  // NOLINT
    1255,       -4,     1257,       -4,     1259,       -4,
    1261,       -4,     1263,       -4,     1265,       -4,
    1267,       -4,     1269,       -4,  // NOLINT
    1271,       -4,     1273,       -4,     1275,       -4,
    1277,       -4,     1279,       -4,     1281,       -4,
    1283,       -4,     1285,       -4,  // NOLINT
    1287,       -4,     1289,       -4,     1291,       -4,
    1293,       -4,     1295,       -4,     1297,       -4,
    1299,       -4,     1301,       -4,  // NOLINT
    1303,       -4,     1305,       -4,     1307,       -4,
    1309,       -4,     1311,       -4,     1313,       -4,
    1315,       -4,     1317,       -4,  // NOLINT
    1319,       -4,     1321,       -4,     1323,       -4,
    1325,       -4,     1327,       -4,     1073743201, -192,
    1414,       -192,   1415,       21,  // NOLINT
    7545,       141328, 7549,       15256,  7681,       -4,
    7683,       -4,     7685,       -4,     7687,       -4,
    7689,       -4,     7691,       -4,  // NOLINT
    7693,       -4,     7695,       -4,     7697,       -4,
    7699,       -4,     7701,       -4,     7703,       -4,
    7705,       -4,     7707,       -4,  // NOLINT
    7709,       -4,     7711,       -4,     7713,       -4,
    7715,       -4,     7717,       -4,     7719,       -4,
    7721,       -4,     7723,       -4,  // NOLINT
    7725,       -4,     7727,       -4,     7729,       -4,
    7731,       -4,     7733,       -4,     7735,       -4,
    7737,       -4,     7739,       -4,  // NOLINT
    7741,       -4,     7743,       -4,     7745,       -4,
    7747,       -4,     7749,       -4,     7751,       -4,
    7753,       -4,     7755,       -4,  // NOLINT
    7757,       -4,     7759,       -4,     7761,       -4,
    7763,       -4,     7765,       -4,     7767,       -4,
    7769,       -4,     7771,       -4,  // NOLINT
    7773,       -4,     7775,       -4,     7777,       -4,
    7779,       -4,     7781,       -4,     7783,       -4,
    7785,       -4,     7787,       -4,  // NOLINT
    7789,       -4,     7791,       -4,     7793,       -4,
    7795,       -4,     7797,       -4,     7799,       -4,
    7801,       -4,     7803,       -4,  // NOLINT
    7805,       -4,     7807,       -4,     7809,       -4,
    7811,       -4,     7813,       -4,     7815,       -4,
    7817,       -4,     7819,       -4,  // NOLINT
    7821,       -4,     7823,       -4,     7825,       -4,
    7827,       -4,     7829,       -4,     7830,       25,
    7831,       29,     7832,       33,  // NOLINT
    7833,       37,     7834,       41,     7835,       -236,
    7841,       -4,     7843,       -4,     7845,       -4,
    7847,       -4,     7849,       -4,  // NOLINT
    7851,       -4,     7853,       -4,     7855,       -4,
    7857,       -4,     7859,       -4,     7861,       -4,
    7863,       -4,     7865,       -4,  // NOLINT
    7867,       -4,     7869,       -4,     7871,       -4,
    7873,       -4,     7875,       -4,     7877,       -4,
    7879,       -4,     7881,       -4,  // NOLINT
    7883,       -4,     7885,       -4,     7887,       -4,
    7889,       -4,     7891,       -4,     7893,       -4,
    7895,       -4,     7897,       -4,  // NOLINT
    7899,       -4,     7901,       -4,     7903,       -4,
    7905,       -4,     7907,       -4,     7909,       -4,
    7911,       -4,     7913,       -4,  // NOLINT
    7915,       -4,     7917,       -4,     7919,       -4,
    7921,       -4,     7923,       -4,     7925,       -4,
    7927,       -4,     7929,       -4,  // NOLINT
    7931,       -4,     7933,       -4,     7935,       -4,
    1073749760, 32,     7943,       32,     1073749776, 32,
    7957,       32,     1073749792, 32,  // NOLINT
    7975,       32,     1073749808, 32,     7991,       32,
    1073749824, 32,     8005,       32,     8016,       45,
    8017,       32,     8018,       49,  // NOLINT
    8019,       32,     8020,       53,     8021,       32,
    8022,       57,     8023,       32,     1073749856, 32,
    8039,       32,     1073749872, 296,  // NOLINT
    8049,       296,    1073749874, 344,    8053,       344,
    1073749878, 400,    8055,       400,    1073749880, 512,
    8057,       512,    1073749882, 448,  // NOLINT
    8059,       448,    1073749884, 504,    8061,       504,
    8064,       61,     8065,       65,     8066,       69,
    8067,       73,     8068,       77,  // NOLINT
    8069,       81,     8070,       85,     8071,       89,
    8072,       61,     8073,       65,     8074,       69,
    8075,       73,     8076,       77,  // NOLINT
    8077,       81,     8078,       85,     8079,       89,
    8080,       93,     8081,       97,     8082,       101,
    8083,       105,    8084,       109,  // NOLINT
    8085,       113,    8086,       117,    8087,       121,
    8088,       93,     8089,       97,     8090,       101,
    8091,       105,    8092,       109,  // NOLINT
    8093,       113,    8094,       117,    8095,       121,
    8096,       125,    8097,       129,    8098,       133,
    8099,       137,    8100,       141,  // NOLINT
    8101,       145,    8102,       149,    8103,       153,
    8104,       125,    8105,       129,    8106,       133,
    8107,       137,    8108,       141,  // NOLINT
    8109,       145,    8110,       149,    8111,       153,
    1073749936, 32,     8113,       32,     8114,       157,
    8115,       161,    8116,       165,  // NOLINT
    8118,       169,    8119,       173,    8124,       161,
    8126,       -28820, 8130,       177,    8131,       181,
    8132,       185,    8134,       189,  // NOLINT
    8135,       193,    8140,       181,    1073749968, 32,
    8145,       32,     8146,       197,    8147,       13,
    8150,       201,    8151,       205,  // NOLINT
    1073749984, 32,     8161,       32,     8162,       209,
    8163,       17,     8164,       213,    8165,       28,
    8166,       217,    8167,       221,  // NOLINT
    8178,       225,    8179,       229,    8180,       233,
    8182,       237,    8183,       241,    8188,       229];  // NOLINT
	
var kToUppercaseTable1Size = 73;  // NOLINT
var kToUppercaseTable1 = [
  334, -112, 1073742192, -64, 383, -64, 388, -4, 1073743056, -104, 1257, -104, 1073744944, -192, 3166, -192,  // NOLINT
  3169, -4, 3173, -43180, 3174, -43168, 3176, -4, 3178, -4, 3180, -4, 3187, -4, 3190, -4,  // NOLINT
  3201, -4, 3203, -4, 3205, -4, 3207, -4, 3209, -4, 3211, -4, 3213, -4, 3215, -4,  // NOLINT
  3217, -4, 3219, -4, 3221, -4, 3223, -4, 3225, -4, 3227, -4, 3229, -4, 3231, -4,  // NOLINT
  3233, -4, 3235, -4, 3237, -4, 3239, -4, 3241, -4, 3243, -4, 3245, -4, 3247, -4,  // NOLINT
  3249, -4, 3251, -4, 3253, -4, 3255, -4, 3257, -4, 3259, -4, 3261, -4, 3263, -4,  // NOLINT
  3265, -4, 3267, -4, 3269, -4, 3271, -4, 3273, -4, 3275, -4, 3277, -4, 3279, -4,  // NOLINT
  3281, -4, 3283, -4, 3285, -4, 3287, -4, 3289, -4, 3291, -4, 3293, -4, 3295, -4,  // NOLINT
  3297, -4, 3299, -4, 3308, -4, 3310, -4, 3315, -4, 1073745152, -29056, 3365, -29056, 3367, -29056,  // NOLINT
  3373, -29056 ];  // NOLINT
  
var kToUppercaseTable5Size = 95;  // NOLINT
var kToUppercaseTable5 = [1601, -4, 1603, -4, 1605, -4, 1607, -4, 1609, -4,
1611, -4, 1613, -4, 1615, -4,  // NOLINT
1617, -4, 1619, -4, 1621, -4, 1623, -4, 1625, -4,
1627, -4, 1629, -4, 1631, -4,  // NOLINT
1633, -4, 1635, -4, 1637, -4, 1639, -4, 1641, -4,
1643, -4, 1645, -4, 1665, -4,  // NOLINT
1667, -4, 1669, -4, 1671, -4, 1673, -4, 1675, -4,
1677, -4, 1679, -4, 1681, -4,  // NOLINT
1683, -4, 1685, -4, 1687, -4, 1689, -4, 1691, -4,
1827, -4, 1829, -4, 1831, -4,  // NOLINT
1833, -4, 1835, -4, 1837, -4, 1839, -4, 1843, -4,
1845, -4, 1847, -4, 1849, -4,  // NOLINT
1851, -4, 1853, -4, 1855, -4, 1857, -4, 1859, -4,
1861, -4, 1863, -4, 1865, -4,  // NOLINT
1867, -4, 1869, -4, 1871, -4, 1873, -4, 1875, -4,
1877, -4, 1879, -4, 1881, -4,  // NOLINT
1883, -4, 1885, -4, 1887, -4, 1889, -4, 1891, -4,
1893, -4, 1895, -4, 1897, -4,  // NOLINT
1899, -4, 1901, -4, 1903, -4, 1914, -4, 1916, -4,
1919, -4, 1921, -4, 1923, -4,  // NOLINT
1925, -4, 1927, -4, 1932, -4, 1937, -4, 1939, -4,
1943, -4, 1945, -4, 1947, -4,  // NOLINT
1949, -4, 1951, -4, 1953, -4, 1955, -4, 1957, -4,
1959, -4, 1961, -4];       // NOLINT

var kToUppercaseTable7Size = 14;  // NOLINT
var kToUppercaseTable7 = [
  6912, 1, 6913, 5, 6914, 9, 6915, 13, 6916, 17, 6917, 21, 6918, 21, 6931, 25,  // NOLINT
  6932, 29, 6933, 33, 6934, 37, 6935, 41, 1073749825, -128, 8026, -128 ];  // NOLINT
	
var kSentinel = -1;
var kToUppercaseMultiStrings0 = [  // NOLINT
  [[83, 83, kSentinel]], [[700, 78, kSentinel]], [[74, 780, kSentinel]], [[921, 776, 769]],  // NOLINT
  [[933, 776, 769]], [[1333, 1362, kSentinel]], [[72, 817, kSentinel]], [[84, 776, kSentinel]],  // NOLINT
  [[87, 778, kSentinel]], [[89, 778, kSentinel]], [[65, 702, kSentinel]], [[933, 787, kSentinel]],  // NOLINT
  [[933, 787, 768]], [[933, 787, 769]], [[933, 787, 834]], [[7944, 921, kSentinel]],  // NOLINT
  [[7945, 921, kSentinel]], [[7946, 921, kSentinel]], [[7947, 921, kSentinel]], [[7948, 921, kSentinel]],  // NOLINT
  [[7949, 921, kSentinel]], [[7950, 921, kSentinel]], [[7951, 921, kSentinel]], [[7976, 921, kSentinel]],  // NOLINT
  [[7977, 921, kSentinel]], [[7978, 921, kSentinel]], [[7979, 921, kSentinel]], [[7980, 921, kSentinel]],  // NOLINT
  [[7981, 921, kSentinel]], [[7982, 921, kSentinel]], [[7983, 921, kSentinel]], [[8040, 921, kSentinel]],  // NOLINT
  [[8041, 921, kSentinel]], [[8042, 921, kSentinel]], [[8043, 921, kSentinel]], [[8044, 921, kSentinel]],  // NOLINT
  [[8045, 921, kSentinel]], [[8046, 921, kSentinel]], [[8047, 921, kSentinel]], [[8122, 921, kSentinel]],  // NOLINT
  [[913, 921, kSentinel]], [[902, 921, kSentinel]], [[913, 834, kSentinel]], [[913, 834, 921]],  // NOLINT
  [[8138, 921, kSentinel]], [[919, 921, kSentinel]], [[905, 921, kSentinel]], [[919, 834, kSentinel]],  // NOLINT
  [[919, 834, 921]], [[921, 776, 768]], [[921, 834, kSentinel]], [[921, 776, 834]],  // NOLINT
  [[933, 776, 768]], [[929, 787, kSentinel]], [[933, 834, kSentinel]], [[933, 776, 834]],  // NOLINT
  [[8186, 921, kSentinel]], [[937, 921, kSentinel]], [[911, 921, kSentinel]], [[937, 834, kSentinel]],  // NOLINT
  [[937, 834, 921]], [[kSentinel]] ]; // NOLINT

var kChunkBits = (1 << 13);
var kStartBit = (1 << 30);

function TableGet(D, table, index) {
	return table[D * index];
}

function GetEntry(entry) {
	return entry & (kStartBit - 1);
}

function IsStart(entry) {
	return (entry & kStartBit) != 0;
}
  
function LookupMapping(ranges_are_linear, table, size, multi_chars, chr, next, result) {
	var kEntryDist = 2;
	var key = chr & (kChunkBits - 1);
	var chunk_start = chr - key;
	var low = 0;
	var high = size - 1;
	
	while (high != low) {
		var mid = low + ((high - low) >> 1);
		
		var current_value = GetEntry(TableGet(kEntryDist, table, mid));
		// If we've found an entry less than or equal to this one, and the next one
		// is not also less than this one, we've arrived.
		if ((current_value <= key) &&
			(mid + 1 == size ||
			 GetEntry(TableGet(kEntryDist, table, mid + 1)) > key)) {
			low = mid;
			break;
		} else if (current_value < key) {
			low = mid + 1;
		} else if (current_value > key) {
			// If we've just checked the bottom-most value and it's not
			// the one we're looking for, we're done.
			if (mid == 0) break;
			high = mid - 1;
		}
	}
  
	var field = TableGet(kEntryDist, table, low);
	var entry = GetEntry(field);
	
	var is_start = IsStart(field);
	
	var found = (entry == key) || (entry < key && is_start);
	
	if (found) {
		var value = table[2 * low + 1];
		if (value == 0) {
			// 0 means not present
			return 0;
		} else if ((value & 3) == 0) {
			// Low bits 0 means a constant offset from the given character.
			if (ranges_are_linear) {
				result[0] = chr + (value >> 2);
			} else {
				result[0] = entry + chunk_start + (value >> 2);
			}
			return 1;
		} else if ((value & 3) == 1) {
			return 0
		} else {
		  // Low bits 2 means a really really special case
		  // The cases of this switch are defined in unicode.py in the
		  // really_special_cases mapping.
		  switch (value >> 2) {
			case 1:
			  // Really special case 1: upper case sigma.  This letter
			  // converts to two different lower case sigmas depending on
			  // whether or not it occurs at the end of a word.
			  if (next != 0 && true) {
				result[0] = 0x03C3;
			  } else {
				result[0] = 0x03C2;
			  }
			  return 1;
			default:
			  return 0;
		  }
		  return -1;
		}
	} else {
		return 0;
	}
}

function ToUpperCase_Convert(c, n, result) {
	var chunk_index = c >> 13;
	switch(chunk_index) {
		case 0:
			return LookupMapping(true, 
				kToUppercaseTable0,
				kToUppercaseTable0Size,
				null, // unused atm
				c,
				n,
				result);
		case 1:
			return LookupMapping(true, 
				kToUppercaseTable1,
				kToUppercaseTable1Size,
				null, // unused atm
				c,
				n,
				result);
		case 5:
			return LookupMapping(true, 
				kToUppercaseTable5,
				kToUppercaseTable5Size,
				null, // unused atm
				c,
				n,
				result);
		case 7:
			return LookupMapping(true, 
				kToUppercaseTable7,
				kToUppercaseTable7Size,
				null, // unused atm
				c,
				n,
				result);
		default: return 0;
	}
}

var kMaxWidth = 3;
var kIsToLower = false;

function char_uppercase(chr) {
	var result = [];
	ToUpperCase_Convert(chr.charCodeAt(),
                     -123,
                     result)
	if(!result[0]) return chr
	return String.fromCharCode(result[0])
}

function ConvertUpperCase(str) {
	var res = "";
	for(var i = 0; i < str.length; i++) {
		res += char_uppercase(str.charAt(i))
	}
	return res;
}